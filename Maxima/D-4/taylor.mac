print("taylor.mac");

/*
diff_n(fn,n):=(

	print("diff_n");
	
);

*/

taylor_2(a,b):=(
		
		f:sin(x),
		
		/* */
		print("sin(x)"),
		
		/* */
		
		f2:diff(f,x),
		
		/* */
		print("a0, differential"),
		
		f2,
		
		/* */
		print("a0, x=0"),
		
		f2_nomi: subst(0,x,f2),
		
		f2_nomi
		
);

diff_n(fn,x,n):=(

	print("fn => ", fn),

/*	print("diff_n"),	*/
	
/*	for i:1 while i <= 10 do (i: i+1, print(i))		*/
/*	for i:1 thru 3 step 1 do (print(i), print(i+10), fn: diff(fn,x)),	*/
/*	for i:1 thru n step 1 do (print(i), print(i+10), fn: diff(fn,x)),	*/
	for i:1 thru n step 1 do 
/*		(print(i), fn: diff(fn,x), print ("fn => ", fn, " / ", "fn(0) => ", subst(0,x,fn))),	*/
		(fn: diff(fn,x)),

	print("fn is now => ", fn),

	fn_new: fn
	
/*	print ("fn_new => ", fn_new),	*/
	
/*	subst(0,x,fn_new)	*/
	
/*	12		=> working	*/
	
/*	fn_new	*/

/*	
	fn2: diff(fn,x),
	
	printf("fn is now => ", fn2),
	
	fn2
	
*/
);

taylor_nth(fn,x,n):= (

	print("---- taylor_nth() ---"),

	print("[taylor_nth]fn => ", fn),

	fn_new: diff_n(fn,x,n),
	
	print("[taylor_nth]fn_new => ", fn_new),

	subst(0,x,fn_new) / factorial(n)
/*	subst(0,x,diff_n(fn,x,n)) / factorial(n)	*/

);

/************************
f4,x,3
************************/
get_taylor_term(fn,x,val,n,sum_):=(

	fn_d: diff(fn,x),
	nomi: subst(0,x,fn_d),
	denomi: factorial(n+1),
	a: float(nomi/denomi),
	
	x: val^(n+1),
	
	t: a*x,
	
	sum_: sum_ + t,
	
	print("fn_d => ", fn_d, " / ", "fn_d(0)(nomi) => ", nomi,
			" / ", "denomi => ", denomi,
			" / ", "a => ", a, " / ", "val => ", val, " / ", "x => ", x),
	
	print("t => ", t, " / ", "sum => ", sum_)

);

/************************
get_taylor_term_2
************************/
get_taylor_term_2(fn,x,n,val,sum_):=(

	print("-------- get_taylor_term_2 -----------"),
	
	print("fn => ", fn, " / ", "n => ", n),

	fn_d: fn,

/*	for i:1 thru 3 step 1 do	*/ 
/*	for i:1 thru n step 1 do	*/ 
	for i:1 thru n step 1 do 
/*		(print(i,"th diff"),fn_d: diff(fn,x), print("fn_d => ", fn_d)),	*/
/*		(print(i,"th diff"),fn_d: diff(fn_d,x), print("fn_d => ", fn_d)),	*/
		(fn_d: diff(fn_d,x)),
	
/*	fn_d: diff(fn,x),	*/

	nomi: subst(0,x,fn_d),
	
	denomi: factorial(n),
	
	a: float(nomi/denomi),
	
/*	x: val^(n+1),	*/
	
/*	t: a*x,	*/
/*	t: a*val,	*/
	t: a*val^n,
	
	sum_: sum_ + t,
	
	print("fn_d => ", fn_d, " / ", "fn_d(0)(nomi) => ", nomi,
			" / ", "denomi => ", denomi,
			" / ", "a(nomi/denomi) => ", a, " / ", "val => ", val),
	
	print("t(a*val) => ", t, " / ", "sum => ", sum_),
	
	sum_

);/*	get_taylor_term_2	*/

/************************
taylor_sum
************************/
taylor_sum(fn,x,n, val):=(

	/****************
		setup
	****************/
	sum_: 0,

	print("taylor_sum"),

	print("fn => ", fn),

	/* a0 */	
/*
	a0: subst(0,x,fn),
	
	print("a0 => ", a0)
*/

	print("------ a0 ---------"),
	
/*	f0: diff(fn,x),	*/
	f0: fn,
	nomi: subst(0,x,f0),
	denomi: factorial(0),
	a0: float(nomi/denomi),
	
	x0: val,
	
	t0: a0*x0,
	
	sum_: sum_ + t0,

	print("f0 => ", f0, " / ", "f0(0)(nomi) => ", nomi,
			" / ", "denomi => ", denomi,
			" / ", "a0 => ", a0, " / ", "x0 => ", x0, " / "),
	
	print("t0 => ", t0, " / ", "sum => ", sum_),

	/* a1	*/
	print("------ a1 ---------"),
	
	f1: diff(fn,x),
	nomi: subst(0,x,f1),
	denomi: factorial(1),
	a1: float(nomi/denomi),
	
	x1: val,
	
	t1: a1*x1,
	
	sum_: sum_ + t1,
	
	print("f1 => ", f1, " / ", "f1(0)(nomi) => ", nomi,
			" / ", "denomi => ", denomi,
			" / ", "a1 => ", a1, " / ", "x1 => ", x1, " / "),
	
	print("t1 => ", t1, " / ", "sum => ", sum_),

	/* a2	*/
	print("------ a2 ---------"),
	
	f2: diff(f1,x),
	nomi: subst(0,x,f2),
	denomi: factorial(2),
	a2: float(nomi/denomi),
	
	x2: val,
	
	t2: a2*x2,
	
	sum_: sum_ + t2,
	
	print("f2 => ", f2, " / ", "f2(0)(nomi) => ", nomi,
			" / ", "denomi => ", denomi,
			" / ", "a2 => ", a2, " / ", "x2 => ", x2, " / "),
	
	/*	print("t2 => ", t2),	*/
	print("t2 => ", t2, " / ", "sum => ", sum_),

	/* a3	*/
	print("------ a3 ---------"),
	
	f3: diff(f2,x),
	nomi: subst(0,x,f3),
	denomi: factorial(3),
	a3: float(nomi/denomi),
	
	x3: val,
	
	t3: a3*x3,
	
	sum_: sum_ + t3,
	
	print("f3 => ", f3, " / ", "f3(0)(nomi) => ", nomi,
			" / ", "denomi => ", denomi,
			" / ", "a3 => ", a3, " / ", "x3 => ", x3, " / "),
	
	print("t3 => ", t3, " / ", "sum => ", sum_),

	/* a4	*/
	print("------ a4 ---------"),
	
	f4: diff(f3,x),
	nomi: subst(0,x,f4),
	denomi: factorial(4),
	a4: float(nomi/denomi),
	
	x4: val,
	
	t4: a4*x4,
	
	sum_: sum_ + t4,
	
	print("f4 => ", f4, " / ", "f4(0)(nomi) => ", nomi,
			" / ", "denomi => ", denomi,
			" / ", "a4 => ", a4, " / ", "x4 => ", x4, " / "),
	
	print("t4 => ", t4, " / ", "sum => ", sum_),
	
		/* a5	*/
	print("------ a5 ---------")
	,
	n: 3,
	
	sum_: get_taylor_term(f4,x,val,n, sum_),
	
/*	print("a5 => ", get_taylor_term(f4,x,val,3, sum_))	*/
	print("a5 => ", sum_)
	,

	/* a6	*/
	print("------ a6 ---------")
	,
	f: diff(f4,x),
	n: n+1,
	
	sum_: get_taylor_term(f,x,val,n, sum_)
	,
	
	print("a6 => ", sum_),
	
	/* a7	*/
	print("------ a7 ---------")
	,
	f: diff(f4,x),
	n: n+1,
	
	sum_: get_taylor_term(f,x,val,n, sum_)
	,
	
	print("a7 => ", sum_)
		

);

/************************
taylor_sum
************************/
taylor_sum_2(fn,x,n, val):=(

	/****************
		setup
	****************/
	sum_: 0,

	print("taylor_sum_2"),

	print("yes"),
	
	print("fn => ", fn),

	/****************
		setup: array
	****************/
	array(sums, 1,n),

	/****************
		1
	****************/
/*	f: diff(f4,x),
	n: n+1,
*/	

/*	sum_: get_taylor_term2(f,x,val,n, sum_)	*/
/*	sum_: get_taylor_term_2(fn,x,n,val,sum_)	*/
	
/*	for i:1 thru n step 1 do	*/ 
	for i:0 thru n step 1 do 
		(
			print("---------- ", i, " -------------"),
			sum_: get_taylor_term_2(fn,x,i,val,sum_),
			print(""),
			sums[1,i]: sum_
		),

	target: subst(val,x,fn),
/*	target: 0.94898461935559,	*/

	for i:0 thru n step 1 do 
		(
			print("---------- ", i, " -------------"),
			print(
				"sums[1,", i, "]", " => ", sums[1,i]
				,
				"(", float(sums[1,i]/target), ")"
			
			)
		)

/*	sums[1,1]	*/

);



